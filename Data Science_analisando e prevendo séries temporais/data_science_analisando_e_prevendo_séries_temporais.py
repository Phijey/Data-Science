# -*- coding: utf-8 -*-
"""Data Science: analisando e prevendo séries temporais

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18BFAt-1dgn7DqLHd_kpOjcOtpLVufiBC

## AULA 01
"""

import pandas as pd

df = pd.read_csv('/content/bicicletas.csv')

df.head()

df.shape

df.info()

# Contando os nulos
df.isnull().sum()

df['temperatura'] = df['temperatura'].interpolate(method='linear')
df['sensacao_termica'] = df['sensacao_termica'].interpolate(method='linear')

df.head(10)

df.duplicated().sum()

df.duplicated(keep= False)

duplicatas = df.duplicated(keep= False)
linhas_duplicadas = df[duplicatas]

# Desordenadas
linhas_duplicadas

# Ordenadas
linhas_duplicadas.sort_values(by = 'data_hora')

df_limpo = df.drop_duplicates()

df_limpo.shape

"""## AULA 02

"""

df_limpo.describe()

import seaborn as sns
import matplotlib.pyplot as plt

sns.displot(df_limpo, x='temperatura', bins=10)
plt.show()

sns.displot(df_limpo, x='sensacao_termica', bins=10)
plt.show()

sns.displot(df_limpo, x='umidade', bins=10)
plt.show()

sns.displot(df_limpo, x='velocidade_vento', bins=10)
plt.show()

fig, axes = plt.subplots(2, 2, figsize=(15, 10))

sns.scatterplot(ax=axes[0,0], data=df_limpo, x='temperatura', y='contagem', color = 'red' )
axes[0,0].set_title('Temperatura vs Contagem')
sns.scatterplot(ax=axes[0,1], data=df_limpo, x='sensacao_termica', y='contagem', color = 'purple' )
axes[0,1].set_title('Sensação Termica vs Contagem')
sns.scatterplot(ax=axes[1,0], data=df_limpo, x='umidade', y='contagem', color = 'green' )
axes[1,0].set_title('Umidade vs Contagem')
sns.scatterplot(ax=axes[1,1], data=df_limpo, x='velocidade_vento', y='contagem', color = 'blue' )
axes[1,1].set_title('Velocidade Vento vs Contagem')

plt.figure(figsize = (8,4))
sns.heatmap(df_limpo.corr(numeric_only=True), annot = True, cmap = 'Blues')
plt.show()

"""## AULA 03

"""

df_limpo.describe(include = [object])

for col in ['clima', 'feriado', 'fim_de_semana', 'estacao']:
  print(f"Coluna: {col}")
  print(df_limpo[col].unique())
  print('='*30, '\n')

plt.figure(figsize=(8,4))
sns.boxplot(x = 'feriado', y = 'contagem', data = df_limpo)
plt.title('Aluguéis de bicicletas em dias normais VS Feriados')
plt.xlabel('feriado')
plt.ylabel('numero de aluguéis')
plt.show()

plt.figure(figsize=(8,4))
sns.boxplot(x = 'fim_de_semana', y = 'contagem', data = df_limpo)
plt.title('Aluguéis de bicicletas em dias normais VS Finais de Semana')
plt.xlabel('Final_Semana')
plt.ylabel('numero de aluguéis')
plt.show()

mediana_feriado = df_limpo.groupby('feriado')['contagem'].median()
mediana_fim_de_semana = df_limpo.groupby('fim_de_semana')['contagem'].median()

mediana_feriado

mediana_fim_de_semana

df_clima = df_limpo.groupby('clima')['contagem'].sum().reset_index()

df_clima

# ordenando no dataframe
df_clima = df_limpo.groupby('clima')['contagem'].sum().reset_index().sort_values(by = 'contagem', ascending=False)

df_clima

plt.figure(figsize=(6,4))
sns.barplot(data=df_clima, x = 'contagem', y = 'clima', hue = 'clima', palette = 'Blues_r', orient = 'h')
plt.title('Bicicletas alugadas por clima')
plt.xlabel('Contagem')
plt.ylabel('')
plt.show()

plt.figure(figsize = (8,4))
paleta_cores = {'Primavera':'green', 'Verão':'orange', 'Outono':'brown', 'Inverno':'blue' }
sns.boxplot(data = df_limpo, x='estacao', y='contagem', hue='estacao', palette=paleta_cores)
plt.title('Aluguéis de bicicletas por estações do ano')
plt.xlabel('Estação do Ano')
plt.ylabel('Contagem')
plt.show()

df_limpo.groupby('estacao')['contagem'].median()

from scipy.stats import mannwhitneyu

primavera = df_limpo[df_limpo['estacao'] == 'Primavera']['contagem']
outono = df_limpo[df_limpo['estacao'] == 'Outono']['contagem']

u_statistic, p_value = mannwhitneyu(primavera, outono, alternative='two-sided')
u_statistic, p_value

"""## AULA 04

"""

df_limpo.info()

df_data = df_limpo.copy()

df_data['data_hora'] = pd.to_datetime(df_data['data_hora'])
df_data.head()

df_data.info()

df_data['mes'] = df_data['data_hora'].dt.month
df_data['horario'] = df_data['data_hora'].dt.hour

df_data.head()

df_data['data_hora'] = df_data['data_hora'].dt.date
df_data.head()

df_data = df_data.rename(columns = {'data_hora':'data'})
df_data.head()

df_data['data'] = pd.to_datetime(df_data['data'])
df_data.info()

df_por_hora = df_data.groupby('horario')['contagem'].sum().reset_index()
plt.figure(figsize = (8,4))
sns.barplot(data = df_por_hora, x='horario', y='contagem')
plt.title('Bicicletas alugadas por hora')
plt.xlabel('Horario do Dia')
plt.ylabel('Contagem de aluguéis')
plt.show()

df_fim_de_semna = df_data[df_data['fim_de_semana'] == 'Sim']

alugueis_fim_de_semana = df_fim_de_semna.groupby('horario')['contagem'].sum().reset_index()
plt.figure(figsize = (8,4))
sns.barplot(data = alugueis_fim_de_semana, x='horario', y='contagem')
plt.title('Bicicletas alugadas por hora (FINAL DE SEMANA)')
plt.xlabel('Horario do Dia')
plt.ylabel('Contagem de aluguéis')
plt.show()

df_feriado = df_data[df_data['feriado'] == 'Sim']

alugueis_feriado = df_feriado.groupby('horario')['contagem'].sum().reset_index()
plt.figure(figsize = (8,4))
sns.barplot(data = alugueis_feriado, x='horario', y='contagem')
plt.title('Bicicletas alugadas por hora (FERIADO)')
plt.xlabel('Horario do Dia')
plt.ylabel('Contagem de aluguéis')
plt.show()

df_tempo = df_data.groupby('data')['contagem'].sum().reset_index()
plt.figure(figsize = (12,6))
sns.lineplot(data=df_tempo,  x='data', y='contagem')
plt.title('Numero de aluguéis por data')
plt.xlabel('Data')
plt.ylabel('Contagem de aluguéis')
plt.show()

alugueis_mensais = df_data.groupby('mes')['contagem'].sum().reset_index()
plt.figure(figsize = (6,4))
sns.barplot(data=alugueis_mensais,  x='mes', y='contagem')
plt.title('Numero de aluguéis por Mês')
plt.xlabel('Mês')
plt.ylabel('Contagem de aluguéis')
plt.show()

"""## AULA 05

"""

from prophet import Prophet

df_prophet = df_data[['data', 'contagem']].rename(columns= {'data': 'ds', 'contagem':'y'})
df_prophet.head()

df_prophet = df_prophet.groupby('ds')['y'].sum().reset_index()
df_prophet

import numpy as np
np.random.seed(4587)

modelo = Prophet()

modelo.fit(df_prophet)
futuro = modelo.make_future_dataframe(periods= 90, freq = 'D')
previsao = modelo.predict(futuro)

fig1 = modelo.plot(previsao)

previsao[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]

fig2 = modelo.plot_components(previsao)

df_prophet.shape

df_treino = pd.DataFrame()

df_treino['ds'] = df_prophet['ds'][:584]
df_treino['y'] = df_prophet['y'][:584]

df_teste = pd.DataFrame()

df_teste['ds'] = df_prophet['ds'][584:]
df_teste['y'] = df_prophet['y'][584:]

np.random.seed(4587)

modelo = Prophet()

modelo.fit(df_treino)
futuro = modelo.make_future_dataframe(periods= 150, freq = 'D')
previsao = modelo.predict(futuro)

fig1 = modelo.plot(previsao)
plt.plot(df_teste['ds'], df_teste['y'], '.r')

fig2 = modelo.plot_components(previsao)

df_previsao = previsao[['ds', 'yhat']]
df_comparacao = pd.merge(df_previsao, df_teste, on = 'ds')
df_comparacao

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(df_comparacao['y'],df_comparacao['yhat'])
rmse = np.sqrt(mse)
print(f'MSE: {mse}, RMSE: {rmse}')

"""## AULA 06

"""

np.random.seed(4587)

modelo = Prophet(yearly_seasonality=True)

modelo.fit(df_treino)
futuro = modelo.make_future_dataframe(periods= 150, freq = 'D')
previsao = modelo.predict(futuro)

fig1 = modelo.plot(previsao)
plt.plot(df_teste['ds'], df_teste['y'], '.r')

fig2 = modelo.plot_components(previsao)

df_previsao = previsao[['ds', 'yhat']]
df_comparacao = pd.merge(df_previsao, df_teste, on = 'ds')
df_comparacao

mse = mean_squared_error(df_comparacao['y'],df_comparacao['yhat'])
rmse = np.sqrt(mse)
print(f'MSE: {mse}, RMSE: {rmse}')

df_prophet

np.random.seed(4587)

modelo = Prophet()

modelo.fit(df_prophet)
futuro = modelo.make_future_dataframe(periods= 0)
previsao = modelo.predict(futuro)

sem_outliers = df_prophet[(df_prophet['y'] > previsao['yhat_lower']) & (df_prophet['y'] < previsao['yhat_upper'])]

sem_outliers

df_treino = pd.DataFrame()

df_treino['ds'] = sem_outliers['ds'][:505]
df_treino['y'] = sem_outliers['y'][:505]

df_teste = pd.DataFrame()

df_teste['ds'] = sem_outliers['ds'][505:]
df_teste['y'] = sem_outliers['y'][505:]

np.random.seed(4587)

modelo_sem_outliers = Prophet(yearly_seasonality=True)

modelo_sem_outliers.fit(df_treino)
futuro = modelo_sem_outliers.make_future_dataframe(periods= 150,  freq = 'D')
previsao = modelo_sem_outliers.predict(futuro)

fig1 = modelo_sem_outliers.plot(previsao)
plt.plot(df_teste['ds'], df_teste['y'], '.r')

df_previsao = previsao[['ds', 'yhat']]
df_comparacao = pd.merge(df_previsao, df_teste, on = 'ds')
df_comparacao

mse = mean_squared_error(df_comparacao['y'],df_comparacao['yhat'])
rmse = np.sqrt(mse)
print(f'MSE: {mse}, RMSE: {rmse}')

from prophet.plot import plot_plotly, plot_components_plotly

plot_plotly(modelo_sem_outliers, previsao)
plot_components_plotly(modelo_sem_outliers, previsao)

np.random.seed(4587)

modelo_sem_outliers = Prophet(yearly_seasonality=True)

modelo_sem_outliers.fit(df_treino)
futuro = modelo_sem_outliers.make_future_dataframe(periods= 365,  freq = 'D')
previsao = modelo_sem_outliers.predict(futuro)

fig = plot_plotly(modelo_sem_outliers, previsao)
fig.show()

"""# ATIVIDADES DAS AULAS

## AULA 04
"""

df_tempo_diferente = df_data.groupby('data')['contagem'].sum().reset_index()

df_tempo_diferente['mes'] = df_tempo_diferente['data'].dt.to_period('M')
df_tempo_diferente

media_alugueis_por_mes= df_tempo_diferente.groupby('mes')['contagem'].mean().reset_index()

media_alugueis_por_mes.head()

plt.figure(figsize = (20,4))
sns.barplot(data=media_alugueis_por_mes,  x='mes', y='contagem')
plt.title('Média de aluguéis por Mês')
plt.xlabel('Mês')
plt.ylabel('Média de aluguéis')
plt.show()
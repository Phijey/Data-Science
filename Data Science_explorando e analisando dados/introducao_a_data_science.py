# -*- coding: utf-8 -*-
"""Introducao a data science

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BUkBD-B7Lp6l_OyHcnTH6MJ54DQMYd0p
"""

nome = "Pedro" #Aula 01

print(nome)

idade = 20
print (idade)

idade = 18
idade

import pandas as pd

notas = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/data-science-analise-exploratoria/main/Aula_0/ml-latest-small/ratings.csv")

notas

notas.columns

notas.shape

notas.columns = ["usuarioId", "filmeId", "nota", "momento"]

notas

notas.head()

notas.head(7)

notas["nota"]

notas["nota"].unique()

notas["nota"].value_counts()

notas["nota"].mean()

notas["nota"].plot() #Aula 02

notas["nota"].plot(kind='hist')

notas["nota"].median()

mediana = notas["nota"].median()
media = notas["nota"].mean()
print(f"Mediana é {mediana}")
print(f"Média é {media}")

notas["nota"].describe()

import seaborn as sns

sns.boxplot(notas["nota"])

filmes = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/data-science-analise-exploratoria/main/Aula_0/ml-latest-small/movies.csv")
filmes.columns = ["filmeId", "titulo", "generos"]
filmes.head() #Aula 03

notas.head()

notas.query("filmeId==1")

notas.query("filmeId==1")["nota"]

notas.query("filmeId==1")["nota"].mean()

notas.query("filmeId==2")["nota"].mean()

notas.groupby("filmeId")["nota"].mean() #Aula 04

media_por_filme = notas.groupby("filmeId")["nota"].mean()
media_por_filme.head()

media_por_filme.plot(kind = "hist")

sns.boxplot(media_por_filme)

media_por_filme.describe()

sns.displot(media_por_filme)

sns.displot(media_por_filme, kde=True)

import matplotlib.pyplot as plt
sns.displot(media_por_filme, kde=True)
plt.title("Histograma das médias dos filme")
plt.xlabel("Média")
plt.ylabel("Qtd_Filmes")

tmdb = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/data-science-analise-exploratoria/refs/heads/main/Aula_0/tmdb_5000_movies.csv")
tmdb.head()

sns.displot(tmdb["revenue"])
plt.title("Distribuiçaõ das Receitas dos Filmes")
plt.xlabel("Receita")
plt.ylabel("Qtd_Filmes")
plt.show()

# prompt: grafico de distribuição do orçamento dos filmes (budget)

sns.displot(tmdb["budget"])
plt.title("Distribuição do Orçamento dos Filmes")
plt.xlabel("Orçamento")
plt.ylabel("Qtd_Filmes")
plt.show()

tmdb.info()

tmdb.describe()

com_faturamento = tmdb.query("revenue > 0")
sns.displot(com_faturamento["revenue"])
plt.title("Distribuição do Orçamento dos Filmes")
plt.xlabel("Orçamento")
plt.ylabel("Qtd_Filmes")
plt.show()

tmdb["original_language"].unique()

tmdb["original_language"].value_counts()

import matplotlib.pyplot as plt
mais_de_10_votos = tmdb.query("vote_count > 10")
sns.displot(mais_de_10_votos["vote_average"])
plt.title("Distribuição das médias das notas dos filmes\ncom mais de 10 votos")
plt.show()

tmdb["original_language"].value_counts()

tmdb['original_language'].value_counts().index

tmdb['original_language'].value_counts().values

contagem_de_lingua = tmdb["original_language"].value_counts().to_frame().reset_index()
contagem_de_lingua.columns = ["original_language", "total"]
contagem_de_lingua.head()

contagem_de_lingua.plot()

sns.barplot(data = contagem_de_lingua, x = "original_language", y = "total")

# Ao invés de ter que fazer todo o processo de cima, o processo de contar a quantidade de aparições com o value_counts e depois fazer um reset de index, o seaborn tem uma
#função de plot chamada countplot que ja irá plotar os dados fazendo a conta das aparições que vc quiser
sns.countplot(data = tmdb, x = "original_language")

contagem_de_lingua.plot(kind="pie", y="total", labels=contagem_de_lingua["original_language"])

total_por_lingua = tmdb["original_language"].value_counts()
total_geral = total_por_lingua.sum()
total_ingles = total_por_lingua.loc["en"]
total_resto_mundo = total_geral - total_ingles
print(f"O total geral é {total_geral}, o total em inglês é {total_ingles} e o total de filmes que não estão em inglês são {total_resto_mundo}")

dados = {
    "lingua" : ["ingles", "outros"],
    "total" : [total_ingles, total_resto_mundo]
}
dados = pd.DataFrame(dados)
dados

sns.barplot(data = dados, x = "lingua", y = "total")

dados.plot(kind = "pie", y="total", labels=dados["lingua"])

total_de_outros_filmes_por_lingua = tmdb.query("original_language != 'en'")["original_language"].value_counts()
total_de_outros_filmes_por_lingua.head()

sns.countplot(data = tmdb.query("original_language != 'en'"), x = "original_language")

sns.countplot(data = tmdb.query("original_language != 'en'"), order = total_de_outros_filmes_por_lingua.index, x = "original_language")

sns.countplot(data = tmdb.query("original_language != 'en'"),hue = "original_language", order = total_de_outros_filmes_por_lingua.index, x = "original_language")

sns.color_palette("mako")

sns.countplot(data = tmdb.query("original_language != 'en'"),
              palette = "mako",
              hue = "original_language",
              hue_order = total_de_outros_filmes_por_lingua.index,
              order = total_de_outros_filmes_por_lingua.index, x = "original_language")
plt.title("Distribuição dos filmes por língua exeto inglês")
plt.show()

tmdb.query("original_language != 'en'")["original_language"].value_counts(normalize = True).head()

plt.figure(figsize=(14,5))
sns.countplot(data = tmdb.query("original_language != 'en'"),
              palette = "mako",
              hue = "original_language",
              hue_order = total_de_outros_filmes_por_lingua.index,
              order = total_de_outros_filmes_por_lingua.index, x = "original_language",
              stat ="percent")
plt.title("Distribuição dos filmes por língua exeto inglês (em procentagem)")
plt.show()

filmes.head(2)

#O codigo que a AI criu bugou geral
notas_do_toy_story = notas.query("filmeId==1")["nota"]
notas_do_jumanji = notas.query("filmeId==2")["nota"]
media_do_toy_story = notas_do_toy_story.mean()
media_do_jumanji = notas_do_jumanji.mean()
print(media_do_toy_story, media_do_jumanji)

import numpy as np

filme1 = [2.5] * 10 + [3.5] * 10
np.mean (filme1)

filme2 = [5] * 10 + [1] * 10
np.mean (filme2)

media_filme1 = np.mean (filme1)
mediana_filme1 = np.median (filme1)

media_filme2 = np.mean (filme2)
mediana_filme2 = np.median (filme2)

print("Filme 1:")
print("Média:", media_filme1)
print("Mediana:", mediana_filme1)

print("\nFilme 2:")
print("Média:", media_filme2)
print("Mediana:", mediana_filme2)

filme0 = [3.0] * 20 #espalha 0
np.mean (filme0)

np.std(filme0), np.std(filme1), np.std(filme2)

plt.boxplot([notas_do_toy_story, notas_do_jumanji])

sns.boxplot(data = notas.query("filmeId in [1,2]"), x= "filmeId", y = "nota")

sns.boxplot(data = notas.query("filmeId in [1,2,3,4,5]"), x= "filmeId", y = "nota")

sns.boxplot(data=notas.query("filmeId in [1,2,3,4,5]"),x ="filmeId", y ="nota", palette ="rocket")

contagem_da_notas = notas.groupby("filmeId")["nota"].count().to_frame().reset_index()
contagem_da_notas.columns = ["filmeId", "total_de_notas_dadas"]
contagem_da_notas

contagem_da_notas.query("total_de_notas_dadas == 1")

notas['filmeId'].value_counts().tail()

notas.groupby("filmeId").count().query("nota == 1")

